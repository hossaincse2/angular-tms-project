import { Component, OnInit } from '@angular/core';
import { VMStock } from '../../models/smModels/vmStock';
import { QueryObject } from '../../models/queryObject';
import { DryItemDemandService } from '../../services/DryItemDemandService';
import { ResponseStatus } from '../../common/QSEnums';
import { MessageHelper } from '../../common/helper/messageHelper';
import { UnitOfMeasureService } from '../../services/unitOfMeasureService';
import { UnitOfMeasure } from '../../models/smModels/unitOfMeasure';
declare var $:any;

@Component({
  selector: 'app-stock-report',
  templateUrl: './stock-report.component.html',
  styleUrls: ['./stock-report.component.css'],
  providers: [DryItemDemandService, UnitOfMeasureService]
})
export class StockReportComponent implements OnInit {

  public objQueryObject: QueryObject = new QueryObject();
  public lstVMStock: VMStock[] = new Array<VMStock>();
  public lstUnitOfMeasure: UnitOfMeasure[] = new Array<UnitOfMeasure>();

  constructor(private dryItemDemandService: DryItemDemandService, private messageHelper: MessageHelper,
    private unitOfMeasureService: UnitOfMeasureService) { }

  ngOnInit() {
    this.objQueryObject.FromDate = new Date();
    this.objQueryObject.ToDate = new Date();
    this.getAllUnitOfMeasure();
    this.generatePrint();
  }
  
  generatePrint() {
    $('.printMe').click(function () {
      $("#stockReports").print({
        globalStyles: true,
        mediaPrint: true,
        stylesheet: null,
        noPrintSelector: ".noprint",
        iframe: true,
        append: null,
        prepend: null,
        manuallyCopyFormValues: true,
        deferred: $.Deferred(),
        timeout: 750,
        title: null,
        doctype: '<!doctype html>'
      });
      // this.generateBarcode(this.objDryItemDemand.AutogeneratedNumber);
    });
  }
  getAllUnitOfMeasure() {
    this.unitOfMeasureService.getAllUnitOfMeasure().subscribe((response) => {
      if (response.StatusCode == ResponseStatus.success) {
        this.lstUnitOfMeasure = response.ResponseObj;
        console.log("unit List", this.lstUnitOfMeasure);
        this.getFilteredStock();
      } else {
        this.messageHelper.showMessage(ResponseStatus.fail, "Failed to save");
      }
    });
  }

  addDays(date: Date, days: number): Date {
    console.log('adding ' + days + ' days');
    date.setDate(date.getDate() + parseInt(days.toString()));
    return date;
  }

  getFilteredStock() {

    this.dryItemDemandService.getStockReport(this.objQueryObject).subscribe((response) => {
      if (response.StatusCode == ResponseStatus.success) {
        this.lstVMStock = response.ResponseObj;

        this.lstVMStock.forEach(stock => {

          if (stock.ADC>0)
          {
            stock.HouMuchDayWillContinue = Math.round(stock.Balance / stock.ADC);
            var exhustedDate = this.addDays(new Date(), stock.HouMuchDayWillContinue);  
            console.log("stock Measure", stock.UnitOfMeasure);  
            var unitOfMeasure = this.lstUnitOfMeasure.filter(u => u.UnitOfMeasureID == stock.UnitOfMeasure)[0];
  
            console.log("unit Measure", unitOfMeasure);  
            if (unitOfMeasure) {
              stock.UnitOfMeasureName = unitOfMeasure.Name;
            }
            stock.DateExchusted = exhustedDate;
          }
         

        })
      } else {
        this.messageHelper.showMessage(ResponseStatus.fail, "No data found");
      }
    });
  }




}
