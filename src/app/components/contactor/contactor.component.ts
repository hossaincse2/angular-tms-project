import { Component, OnInit } from '@angular/core';
import { Contactor } from '../../models/smModels/Contactor';
import { ContactorService } from '../../services/contactorService';
import { ResponseStatus, ContractorStatus, ContractType, DemandItemType } from '../../common/QSEnums';
import { MessageHelper } from '../../common/helper/messageHelper';
import { ItemTypeService } from '../../services/itemTypeService';
import { ContactorItemDetailService } from '../../services/contatorItemDetails';
import { ItemType } from '../../models/smModels/itemType';
import { ContractorItemDetail } from '../../models/smModels/contactorItemDetail';
import { ItemService } from '../../services/itemService';
import { Item } from '../../models/smModels/item';
import { VMContractor } from '../../models/smModels/vmContractor';
import { SupplyPlaceService } from '../../services/supplyPlaceService';
import { SupplyPlace } from '../../models/smModels/supplyPlace';
declare var $: any;

@Component({
  selector: 'app-contactor',
  templateUrl: './contactor.component.html',
  styleUrls: ['./contactor.component.css'],

  providers: [ContactorService, ItemTypeService, ContactorItemDetailService, ItemService,
    SupplyPlaceService]
})
export class ContactorComponent implements OnInit {

  public objContactor: Contactor = new Contactor();
  showEntry = false;
  lstContactor: Contactor[] = new Array<Contactor>();
  lstVMContractor: VMContractor[] = new Array<VMContractor>();
  lstContractType = [];
  lstItemType: ItemType[] = new Array<ItemType>();
  lstItem: Item[] = new Array<Item>();
  lstAllItem: Item[] = new Array<Item>();
  lstSupplyPlace:SupplyPlace[]=new Array<SupplyPlace>();

  public objContractorItemDetail: ContractorItemDetail = new ContractorItemDetail();
  lstContractorItemDetail: ContractorItemDetail[] = new Array<ContractorItemDetail>();
  public objVMContractor: VMContractor = new VMContractor();
  constructor(private messageHelper: MessageHelper, private ContactorService: ContactorService,
    private itemTypeService: ItemTypeService, private contactorItemDetailService: ContactorItemDetailService,
    private itemService: ItemService, private supplyPlaceService: SupplyPlaceService) { }

  ngOnInit() {
    this.showEntry = false;
    this.getAllContactor();
    this.getAllItemType();
    this.getAllItem();
    this.generatePrint();
    this.getAllSupplyPlace();
    this.lstContractType = ContractType;
    this.objContractorItemDetail = new ContractorItemDetail();
    this.lstContractorItemDetail.push(this.objContractorItemDetail);
  }


  getAllSupplyPlace() {
    this.supplyPlaceService.getAllSupplyPlace().subscribe((response) => {
      if (response.StatusCode == ResponseStatus.success) {
        this.lstSupplyPlace = response.ResponseObj;
        console.log("ItemType", response.ResponseObj);
      }
    });
  }


  generatePrint() {
    $('.printMe').click(function () {
      $("#printConductor").print({
        globalStyles: true,
        mediaPrint: false,
        stylesheet: null,
        noPrintSelector: ".noprint",
        iframe: true,
        append: null,
        prepend: null,
        manuallyCopyFormValues: true,
        deferred: $.Deferred(),
        timeout: 750,
        title: null,
        doctype: '<!doctype html>'
      });
      // this.generateBarcode(this.objDryItemDemand.AutogeneratedNumber);
    });
  }
  addResource() {
    this.objContractorItemDetail = new ContractorItemDetail();
    this.lstContractorItemDetail.push(this.objContractorItemDetail);
  }
  removeResource() {
    this.lstContractorItemDetail.pop();
  }

  getAllItemType() {
    this.itemTypeService.getAllItemType().subscribe((response) => {
      if (response.StatusCode == ResponseStatus.success) {
        this.lstItemType = response.ResponseObj;
        console.log(response.ResponseObj);
        this.getAllContactor();
      }
    });
  }

  addNew() {
    this.showEntry = true;
    this.lstContractorItemDetail = [];
    this.objContractorItemDetail = new ContractorItemDetail();
    this.lstContractorItemDetail.push(this.objContractorItemDetail);


  }

  searchContractor() {

  }

  editContactor(vmContractor) {
    this.objContactor = vmContractor.Contactor;
    this.lstContractorItemDetail = vmContractor.lstContractorItemDetail;
    if (this.lstContractorItemDetail.length > 0) {
      this.lstItem = this.lstAllItem.filter(i => i.ItemTypeID == this.lstContractorItemDetail[0].ItemType);
      this.objContactor.ItemTypeID = this.lstContractorItemDetail[0].ItemType;
    }




    console.log("Item List", this.lstItem);

    console.log("Item Detail", this.lstContractorItemDetail);

    this.lstContractorItemDetail.forEach(detal => {

    })


    this.showEntry = true;
  }



  close() {
    this.showEntry = false;
    this.objContractorItemDetail = new ContractorItemDetail();
    this.lstContractorItemDetail = [];
  }

  getAllItem() {
    this.itemService.getAllItem().subscribe((response) => {
      if (response.StatusCode == ResponseStatus.success) {
        this.lstAllItem = response.ResponseObj;
      }
    });
  }

  LoadItemName() {
    if (this.objContactor.ItemTypeID <= 4) {
      this.lstItem = this.lstAllItem.filter(i => i.ItemTypeID == DemandItemType[3].id);
    }
    else if (this.objContactor.ItemTypeID > 4 && this.objContactor.ItemTypeID < 12) {
      this.lstItem = this.lstAllItem.filter(i => i.ItemTypeID == DemandItemType[4].id);
    }
    else if (this.objContactor.ItemTypeID > 12 && this.objContactor.ItemTypeID < 15) {
      this.lstItem = this.lstAllItem.filter(i => i.ItemTypeID == DemandItemType[3].id);
    }
    else if (this.objContactor.ItemTypeID > 14) {
      this.lstItem = this.lstAllItem.filter(i => i.ItemTypeID == DemandItemType[1].id);
    }
  }

  getAllContactor() {
    this.ContactorService.getAllContactor().subscribe((response) => {
      if (response.StatusCode == ResponseStatus.success) {
        this.lstVMContractor = response.ResponseObj;
        this.lstVMContractor.forEach(vContractor => {
          var status = ContractorStatus.filter(s => s.id = vContractor.Contactor.Status)[0];
          if (status)
            vContractor.Contactor.StatusName = status.name;
        })
      }
    });
  }

  contactorDetail(vmContractor) {

    this.lstContractorItemDetail = vmContractor.lstContractorItemDetail;

    this.lstContractorItemDetail.forEach(detail => {
      console.log(detail);
      var item = this.lstAllItem.filter(item => item.ItemID == detail.ItemID)[0];
      if (item) {
        detail.ItemName = item.ItemName;
      }
    })
    $('#adminApprovalModalPrint').modal("show");
  }


  saveContactor() {
    this.objVMContractor.Contactor = this.objContactor;
    this.objVMContractor.lstContractorItemDetail = this.lstContractorItemDetail;

    console.log(this.objVMContractor);

    this.ContactorService.saveContactor(this.objVMContractor).subscribe((response) => {
      if (response.StatusCode == ResponseStatus.success) {
        this.messageHelper.showMessage(ResponseStatus.success, "Successfully Saved");
        this.objContactor = new Contactor();
        this.lstContractorItemDetail = [];
        this.objContractorItemDetail = new ContractorItemDetail();
        this.lstContractorItemDetail.push(this.objContractorItemDetail);
      } else {
        this.messageHelper.showMessage(ResponseStatus.fail, "Failed to save");
      }
    });
  }
}
