import { Component, OnInit } from '@angular/core';
import { DryItemDemandService } from '../../services/dryItemDemandService';
import { VMDryItemDemand } from '../../models/smModels/vmDryItemDemand';
import { ResponseStatus, DemandType, MaterialsType, SSDList, DemandStatus, FamilyType } from '../../common/QSEnums';
import { VMUnit } from '../../models/smModels/vmUnit';
import { UnitService } from '../../services/unitService';
import { MessageHelper } from '../../common/helper/messageHelper';
import { DryItemDemandDetail } from '../../models/smModels/dryItemDemandDetail';
import { DryItemDemandResourceDetail } from '../../models/smModels/dryItemDemandResourceDetail';
import { DryItemDemandFamilyDetail } from '../../models/smModels/dryItemDemandFamilyDetail';
import { DryItemDemand } from '../../models/smModels/dryItemDemand';
import { QueryObject } from '../../models/queryObject';
import { PackingMaterialService } from '../../services/packingMaterialService';
import { PackingMaterial } from '../../models/smModels/packingMaterial';
import { DryDemandRportObj } from '../../models/smModels/dryDemandRportObj';
import { UserService } from '../../services/userService';
import { LocalStorageService } from 'angular-web-storage';
import { Users } from '../../models/user';
declare var $: any;


@Component({
  selector: 'app-dry-rat-ds',
  templateUrl: './dry-rat-ds.component.html',
  styleUrls: ['./dry-rat-ds.component.css'],
  providers: [UnitService, DryItemDemandService,
    PackingMaterialService, UserService]
})


export class DryRatDsComponent implements OnInit {
  public lstVMDryItemDemand: VMDryItemDemand[] = new Array<VMDryItemDemand>();
  public lstVMUnit: VMUnit[] = new Array<VMUnit>();
  public lstDemandType: any[];
  public lstMaterialsType: any[];
  public totalResource = 0;
  public totalDay = 1;
  public netResource = 0;
  public bellow3ChildTotal = 0;
  public netChildTotal = 0;
  public objVMDryItemDemand: VMDryItemDemand = new VMDryItemDemand();
  public lstSSDList: any[];
  public objQueryObject: QueryObject = new QueryObject();
  public objDryItemDemand: DryItemDemand = new DryItemDemand();
  public objDryDemandRportObj: DryDemandRportObj = new DryDemandRportObj();
  public userID: string;
  public lstDryItemDemandDetail: DryItemDemandDetail[] = new Array<DryItemDemandDetail>();
  public objDryItemDemandResourceDetail: DryItemDemandResourceDetail = new DryItemDemandResourceDetail();
  public lstDryItemDemandFamilyDetail: DryItemDemandFamilyDetail[] = new Array<DryItemDemandFamilyDetail>();
  public lstPackingMaterial: PackingMaterial[] = new Array<PackingMaterial>();
  public lstFamilyType: any[];
  public objUser: Users = new Users();
  constructor(private dryItemDemandService: DryItemDemandService, private messageHelper: MessageHelper,
    private UnitService: UnitService, private packingMaterialService: PackingMaterialService,
    private userService: UserService) { }

  ngOnInit() {
    this.lstVMUnit = [];
    this.objQueryObject.ToDate = new Date();
    this.objQueryObject.FromDate = new Date();
    this.lstFamilyType = FamilyType;
    var dt = new Date(new Date().toString());
    dt.setDate(dt.getDate() - 1);
    this.objQueryObject.FromDate = dt;

    console.log(dt);
    this.objQueryObject.FromDate
    this.getAllUnit();
    this.getAllPackingMaterial();

    this.generateBarcode(this.objDryItemDemand.AutogeneratedNumber);
    this.generatePrint();
    this.userID = "ocssd"
  }


  generatePrint() {
    $('.printMe').click(function () {
      $("#dryItemPrintpdf").print({
        globalStyles: true,
        mediaPrint: false,
        stylesheet: null,
        noPrintSelector: ".noprint",
        iframe: true,
        append: null,
        prepend: null,
        manuallyCopyFormValues: true,
        deferred: $.Deferred(),
        timeout: 750,
        title: null,
        doctype: '<!doctype html>'
      });
      this.generateBarcode(this.objDryItemDemand.AutogeneratedNumber);
    });
  }

  getAllPackingMaterial() {
    this.packingMaterialService.getAllPackingMaterial().subscribe((response) => {
      if (response.StatusCode == ResponseStatus.success) {
        this.lstPackingMaterial = response.ResponseObj;
      }
    });
  }

  generateBarcode(value: string) {
    $(document).ready(function () {

      var btype = 'code39';
      var renderer = 'css';

      var settings = {
        output: renderer,
        bgColor: '#FFFFFF',
        color: '#000000',
        barWidth: '1',
        barHeight: '50',
        moduleSize: '10',
        showHRI: true,
        posX: '0',
        posY: '0',
        addQuietZone: '1'
      };

      $("#barcodeTarget").html("").show().barcode(value, btype, settings);
    });
  }


  saveDistributeDryItemDemand() {
    this.objVMDryItemDemand.DryItemDemand = this.objDryItemDemand;
    this.objVMDryItemDemand.lstDryItemDemandDetail = this.lstDryItemDemandDetail;

    this.dryItemDemandService.saveDryItemDistribution(this.objVMDryItemDemand).subscribe((response) => {
      if (response.StatusCode == ResponseStatus.success) {
        $('#DryItemDemandModal').modal("hide");
        this.messageHelper.showMessage(ResponseStatus.success, "Successfully Saved");
        this.objDryItemDemand = new DryItemDemand();
        this.objDryItemDemandResourceDetail = new DryItemDemandResourceDetail();
        this.lstDryItemDemandDetail = [];
        this.objVMDryItemDemand = new VMDryItemDemand();
        this.getAllDryItemDemandForDistribution();
      } else {
        this.messageHelper.showMessage(ResponseStatus.fail, "Failed to save");
      }
    });
  }

  distributeDryItemDemand(vmDemand) {
    this.objDryItemDemand = vmDemand.DryItemDemand;
    this.lstDryItemDemandDetail = vmDemand.lstDryItemDemandDetail;

    this.lstDryItemDemandDetail.forEach(detail => {
      var packingM = this.lstPackingMaterial.filter(p => p.PackingMaterialID == detail.PackingMaterial)[0];
      detail.PackingMaterialName = packingM.MaterialName;
    })

    this.getAllDryItemDemandForDistribution();

    $('#DryItemDemandModal').modal("show");
  }

  getUserByID() {
    this.userService.getUserByID(this.userID).subscribe((response) => {
      if (response.StatusCode == ResponseStatus.success) {

        this.objUser = response.ResponseObj;
      }
    });
  }



  distributeDryItemDemandPrint(vmDemand) {
    this.getUserByID();
    this.dryItemDemandService.printDemand(vmDemand.DryItemDemand.DryItemDemandID)
      .subscribe(response => {

        if (response.StatusCode == ResponseStatus.success) {
          this.objVMDryItemDemand = response.ResponseObj;
          this.objDryItemDemand = this.objVMDryItemDemand.DryItemDemand;
          this.objDryDemandRportObj = this.objVMDryItemDemand.DryDemandRportObj;
          this.objDryItemDemandResourceDetail = this.objVMDryItemDemand.DryItemDemandResourceDetail;
          this.lstDryItemDemandDetail = this.objVMDryItemDemand.lstDryItemDemandDetail;
          this.lstDryItemDemandFamilyDetail = this.objVMDryItemDemand.lstDryItemDemandFamilyDetail;

          this.lstDryItemDemandFamilyDetail.forEach(f => {
            var post = this.lstFamilyType.filter(fam => fam.id == f.PostID)[0];
            if (post) {
              f.PostName = post.name;
            }
          })

          var demandType = this.lstDemandType.filter(d => d.id == this.objDryItemDemand.DemandTypeID)[0];
          if (demandType) {
            this.objDryItemDemand.DemandTypeName = demandType.name;
          }
          var unit = this.lstVMUnit.filter(u => u.Unit.UnitID == this.objDryItemDemand.FromUnitID)[0];
          if (unit) {
            this.objDryItemDemand.UnitName = unit.Unit.UnitName;
          }
          this.lstDryItemDemandDetail.forEach(detail => {
            var packingM = this.lstPackingMaterial.filter(p => p.PackingMaterialID == detail.PackingMaterial)[0];
            if (packingM) {
              detail.PackingMaterialName = packingM.MaterialName;
            }
          })

          if (this.objDryItemDemand.DemandTypeID == DemandType[0].id) {
            $('#lblChildrenCount').css("display", "none");
          }
          else if (this.objDryItemDemand.DemandTypeID == DemandType[1].id) {
            $('#lblChildrenCount').css("display", "block");
          }
          this.generateBarcode(this.objDryItemDemand.AutogeneratedNumber);

        }
      });

    $('#DryItemDemandModalPrint').modal("show");


  }

  getAllDryItemDemandByFilter() {
    this.dryItemDemandService.getFilteredDryItemDemandFroDistribution(this.objQueryObject).subscribe((response) => {
      if (response.StatusCode == ResponseStatus.success) {

        console.log("unit Demand", response.ResponseObj);
        this.lstVMDryItemDemand = response.ResponseObj;

        this.lstVMDryItemDemand.forEach(demad => {
          var unit = this.lstVMUnit.filter(u => u.Unit.UnitID == demad.DryItemDemand.FromUnitID)[0];

          var rStatus = DemandStatus.filter(d => d.id == demad.DryItemDemand.Status)[0];
          if (unit) {
            demad.DryItemDemand.UnitName = unit.Unit.UnitName;
            demad.DryItemDemand.StatusName = rStatus.name;
          }


        })
      } else {
        this.messageHelper.showMessage(ResponseStatus.fail, "No data found");
      }
    });
  }



  getAllDryItemDemandForDistribution() {

    this.dryItemDemandService.getFilteredDryItemDemandFroDistribution(this.objQueryObject).subscribe((response) => {
      if (response.StatusCode == ResponseStatus.success) {

        console.log("unit Demand", response.ResponseObj);
        this.lstVMDryItemDemand = response.ResponseObj;

        this.lstVMDryItemDemand.forEach(demad => {
          var unit = this.lstVMUnit.filter(u => u.Unit.UnitID == demad.DryItemDemand.FromUnitID)[0];

          var rStatus = DemandStatus.filter(d => d.id == demad.DryItemDemand.Status)[0];
          if (unit) {
            demad.DryItemDemand.UnitName = unit.Unit.UnitName;
            demad.DryItemDemand.StatusName = rStatus.name;
          }

        })
      } else {
        this.lstVMDryItemDemand = [];
        this.messageHelper.showMessage(ResponseStatus.fail, "No data found");
      }
    });
  }

  getAllUnit() {
    this.UnitService.getAllUnit().subscribe((response) => {
      if (response.StatusCode == ResponseStatus.success) {
        this.lstVMUnit = response.ResponseObj;
        this.lstDemandType = DemandType;
        this.lstMaterialsType = MaterialsType;
        this.getAllDryItemDemandForDistribution();
      }
    });
  }

  demandDetail(vmDemand) {

    console.log("unit Demand", this.objVMDryItemDemand.DryItemDemand);
    this.lstSSDList = SSDList;
    this.objVMDryItemDemand = vmDemand;
    this.objDryItemDemand = this.objVMDryItemDemand.DryItemDemand;
    this.objDryItemDemandResourceDetail = this.objVMDryItemDemand.DryItemDemandResourceDetail;
    this.lstDryItemDemandDetail = this.objVMDryItemDemand.lstDryItemDemandDetail;
    this.lstDryItemDemandFamilyDetail = this.objVMDryItemDemand.lstDryItemDemandFamilyDetail;
    $('#DryItemDemandModal').modal("show");
  }
}
