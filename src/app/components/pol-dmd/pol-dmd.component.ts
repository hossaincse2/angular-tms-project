import { Component, OnInit } from '@angular/core';
import { ResponseStatus, DemandItemType, DemandStatus, SMS_USER_LEVEL, AllotmentType } from '../../common/QSEnums';
import { Item } from '../../models/smModels/item';
import { ItemService } from '../../services/itemService';
import { ItemType } from '../../models/smModels/itemType';
import { VMUnit } from '../../models/smModels/vmUnit';
import { POLDemand } from '../../models/smModels/POLDemand';
import { POLDemandDetail } from '../../models/smModels/POLDemandDetail';
import { VMPOLDemand } from '../../models/smModels/vmPOLDemand';
import { MessageHelper } from '../../common/helper/messageHelper';
import { UnitService } from '../../services/unitService';
import { POLDemandService } from '../../services/polDemandService';
import { QueryObject } from '../../models/queryObject';
import { LocalStorageService } from 'angular-web-storage';
import { UnitOfMeasureService } from '../../services/unitOfMeasureService';
import { UnitOfMeasure } from '../../models/smModels/unitOfMeasure';
import { VMPOLDistributionInfo } from '../../models/smModels/vmPOLDistributionInfo';
import { SupplyPlaceService } from '../../services/supplyPlaceService';
import { SupplyPlace } from '../../models/smModels/supplyPlace';
import { POLAllotmentService } from '../../services/polAllotmentService';
import { VMPOLAllotment } from '../../models/smModels/vmPOLAllotment';
import { POLAllotmentDetail } from '../../models/smModels/polAllotmentDetail';

declare var $: any;

@Component({
  selector: 'app-pol-dmd',
  templateUrl: './pol-dmd.component.html',
  styleUrls: ['./pol-dmd.component.css'],
  providers: [ItemService, POLDemandService, UnitService,
    UnitOfMeasureService, SupplyPlaceService, POLAllotmentService]
})
export class PolDmdComponent implements OnInit {

  public objPOLDemand: POLDemand = new POLDemand();
  public objPOLDemandDetail: POLDemandDetail = new POLDemandDetail();
  public lstPOLDemandDetail: POLDemandDetail[] = new Array<POLDemandDetail>();
  public objVMPOLDemand: VMPOLDemand = new VMPOLDemand();
  public lstVMUnit: VMUnit[] = new Array<VMUnit>();
  public lstVMUnitDemand: VMPOLDemand[] = new Array<VMPOLDemand>();
  public lstVMPOLDistributionInfo: VMPOLDistributionInfo[] = new Array<VMPOLDistributionInfo>()
  objQueryObject: QueryObject = new QueryObject();
  totalDemand: number = 0;
  showEntry: boolean = false;
  lstItemType: ItemType[] = new Array<ItemType>();
  lstItem: Item[] = new Array<Item>();
  lstFreshItem: Item[] = new Array<Item>();
  lstSupplyPlace: SupplyPlace[] = new Array<SupplyPlace>();
  public lstVMPOLAllotment: VMPOLAllotment[] = new Array<VMPOLAllotment>();
  public lstUnitOfMeasure: UnitOfMeasure[] = new Array<UnitOfMeasure>();
  public objItem: Item = new Item();
  public lstPOLAllotmentDetail: POLAllotmentDetail[] = new Array<POLAllotmentDetail>();


  userLevel: number = 0;
  constructor(private messageHelper: MessageHelper, private ItemService: ItemService
    , private POLDemandService: POLDemandService, private UnitService: UnitService,
    private localStorageService: LocalStorageService, private unitOfMeasureService: UnitOfMeasureService,
    private supplyPlaceService: SupplyPlaceService, private polAllotmentService: POLAllotmentService) { }

  ngOnInit() {

    this.lstVMUnit = [];
    this.getAllItem();
    this.getAllUnit();
    this.getAllUnitOfMeasure();
    this.getAllSupplyPlace();
    this.objQueryObject.FromDate = new Date();
    this.objQueryObject.ToDate = new Date();
    this.userLevel = this.localStorageService.get("userLevel");
    this.printPolDemand();
  }
  getAllSupplyPlace() {
    this.supplyPlaceService.getAllSupplyPlace().subscribe((response) => {
      if (response.StatusCode == ResponseStatus.success) {
        this.lstSupplyPlace = response.ResponseObj;
        console.log("ItemType", response.ResponseObj);
      }
    });
  }
  getAllUnit() {
    this.UnitService.getAllUnit().subscribe((response) => {
      if (response.StatusCode == ResponseStatus.success) {
        this.lstVMUnit = response.ResponseObj;
      } else {
        this.messageHelper.showMessage(ResponseStatus.fail, "Failed to save");
      }
    });
  }
  printPolDemand() {
    $('.printMe').click(function () {
      $("#printPolDemandBody").print({
        globalStyles: true,
        mediaPrint: true,
        stylesheet: null,
        noPrintSelector: ".noprint",
        iframe: true,
        append: null,
        prepend: null,
        manuallyCopyFormValues: true,
        deferred: $.Deferred(),
        timeout: 750,
        title: null,
        doctype: '<!doctype html>'
      });
      this.generateBarcode(this.objDryItemDemand.AutogeneratedNumber);
    });
  }


  viewAllotment() {
    $('#modalPolAllotment').modal("show");
  }

  viewDetailAllotment(vmAllotment) {

    console.log("Vm Allotment", vmAllotment);

    this.lstPOLAllotmentDetail = vmAllotment.lstPOLAllotmentDetail;

    console.log("item list", this.lstItem);

    this.lstPOLAllotmentDetail.forEach(detail => {
      var item = this.lstItem.filter(i => i.ItemID == detail.ItemID)[0];
      if (item) {
        detail.ItemName = item.ItemName;
      }
    })

    $('#modalAllotmentDetail').modal("show");
  }


  getFilteredPOLAllotment() {
    this.polAllotmentService.getFilteredPOLAllotment(this.objQueryObject).subscribe((response) => {
      if (response.StatusCode == ResponseStatus.success) {
        this.lstVMPOLAllotment = response.ResponseObj;
        if (this.lstVMPOLAllotment.length > 0) {
          this.lstVMPOLAllotment.forEach(v => {
            var unit = this.lstVMUnit.filter(u => u.Unit.UnitID == v.POLAllotment.UnitID)[0];
            var rStatus = AllotmentType.filter(d => d.id == v.POLAllotment.AllotmentType)[0];
            if (unit) {
              v.POLAllotment.UnitName = unit.Unit.UnitName;
              v.POLAllotment.AllotmentTypeName = rStatus.name;
            }
          })
        }
      }
    });
  }

  getAllUnitOfMeasure() {
    this.unitOfMeasureService.getAllUnitOfMeasure().subscribe((response) => {
      if (response.StatusCode == ResponseStatus.success) {
        this.lstUnitOfMeasure = response.ResponseObj;
        console.log("unit List", this.lstUnitOfMeasure);
      } else {
        this.messageHelper.showMessage(ResponseStatus.fail, "Failed to save");
      }
    });
  }



  loadItem() {
    this.lstPOLDemandDetail = [];
    this.lstFreshItem = this.lstItem.filter(i => i.ItemTypeID == DemandItemType[2].id);
    this.lstFreshItem.forEach(item => {
      this.objPOLDemandDetail = new POLDemandDetail();
      this.objPOLDemandDetail.ItemID = item.ItemID;
      this.objPOLDemandDetail.ItemName = item.ItemName;
      this.objPOLDemandDetail.Quantity = item.FreeScale;
      this.lstPOLDemandDetail.push(this.objPOLDemandDetail);
    })
  }

  calculateTotal(index) {

    if (this.lstPOLDemandDetail[index].itemCheck) {
      $('#Quantity' + index).removeAttr("disabled")
    }
    else {
      $('#Quantity' + index).attr("disabled", true);
    }
    this.lstPOLDemandDetail[index].Total = (this.lstPOLDemandDetail[index].Quantity);
  }


  editDemand(vmPOLDemand) {
    debugger;
    this.totalDemand = 0;
    this.objPOLDemand = vmPOLDemand.POLDemand;

    this.lstPOLDemandDetail = [];
    this.lstFreshItem = this.lstItem.filter(i => i.ItemTypeID == DemandItemType[2].id);

    this.lstFreshItem.forEach(item => {
      var unit = this.lstUnitOfMeasure.filter(u => u.UnitOfMeasureID == item.UnitOfMesure)[0];

      this.objPOLDemandDetail = vmPOLDemand.lstPOLDemandDetail.filter(c => c.ItemID == item.ItemID)[0];

      if (this.objPOLDemandDetail) {
        this.objPOLDemandDetail.ItemName = item.ItemName;
        this.objPOLDemandDetail.itemCheck = true;
        this.totalDemand += this.objPOLDemandDetail.Total;
        this.lstPOLDemandDetail.push(this.objPOLDemandDetail);
      }
      else {
        var newObjPOLDemandDetail = new POLDemandDetail();
        newObjPOLDemandDetail.ItemID = item.ItemID;
        newObjPOLDemandDetail.ItemName = item.ItemName;
        newObjPOLDemandDetail.Quantity = item.FreeScale;
        newObjPOLDemandDetail.itemCheck = false;
        newObjPOLDemandDetail.Total = 0;
        this.lstPOLDemandDetail.push(newObjPOLDemandDetail);
      }
    })

    this.checkGari();
    this.checkBarel();
    this.checkJerican();
    this.showEntry = true;
  }


  addNew() {
    this.objItem = new Item();
    this.showEntry = true;
  }
  close() {
    this.objItem = new Item();
    this.showEntry = false;
  }

  deleteDemand(vmPOLDemand) {

  }

  checkGari() {
    if (this.objPOLDemand.Gari) {
      $('#numberOfGari').removeAttr("disabled");
      $('#numberOfGari').attr("required", "required");
      $('#gariNumber').removeAttr("disabled");

    }
    else {
      $('#numberOfGari').attr("disabled", true);
      $('#gariNumber').attr("disabled", true);
      $('#numberOfGari').val("0");
      $('#gariNumber').val(" ");
    }
  }

  checkBarel() {
    if (this.objPOLDemand.Baral) {
      $('#numberOfBaral').removeAttr("disabled")
      $('#numberOfBaral').attr("required", "required");
    }
    else {
      $('#numberOfBaral').attr("disabled", true);
      $('#numberOfBaral').val("0");
    }
  }

  checkJerican() {
    if (this.objPOLDemand.Jerican) {
      $('#numberOfJerican').removeAttr("disabled")
      $('#numberOfJerican').attr("required", "required");
    }
    else {
      $('#numberOfJerican').attr("disabled", true);
      $('#numberOfJerican').val("0");
    }
  }

  getAllItem() {
    this.ItemService.getAllItem().subscribe((response) => {
      if (response.StatusCode == ResponseStatus.success) {
        this.lstItem = response.ResponseObj;
      }
    });
  }

  demandDetail(vmPOLDemand) {
    this.lstPOLDemandDetail = vmPOLDemand.lstPOLDemandDetail;

    this.lstPOLDemandDetail.forEach(c => {
      var item = this.lstItem.filter(i => i.ItemID == c.ItemID)[0];
      if (item != null) {
        c.ItemName = item.ItemName;
      }
    })

    $('#unitDemandModal').modal("show");
  }


  getFilteredPOLDemand() {

    this.POLDemandService.getFilteredPOLDemand(this.objQueryObject).subscribe((response) => {
      if (response.StatusCode == ResponseStatus.success) {

        if (response.ResponseObj) {

          this.lstVMUnitDemand = response.ResponseObj;
          console.log(this.lstVMUnitDemand);

          this.lstVMUnitDemand.forEach(v => {
            v.POLDemand.showApproval = false;

            var unit = this.lstVMUnit.filter(u => u.Unit.UnitID == v.POLDemand.FromUnitID)[0];
            var rStatus = DemandStatus.filter(d => d.id == v.POLDemand.Status)[0];
            if (unit) {
              v.POLDemand.UnitName = unit.Unit.UnitName;
              v.POLDemand.StatusName = rStatus.name;
            }


            console.log("Status", v.POLDemand.Status);
            console.log("User Level", this.userLevel);

            //for uni approver
            if (v.POLDemand.Status == DemandStatus[0].id
              && (this.userLevel >= SMS_USER_LEVEL[1].id && this.userLevel < SMS_USER_LEVEL[5].id)) {
              v.POLDemand.showApproval = true;
              console.log("unit admin");
            } else if (v.POLDemand.Status == DemandStatus[1].id && this.userLevel == SMS_USER_LEVEL[9].id) {
              v.POLDemand.showApproval = true;
              console.log("SSD admin");
            } else {
              v.POLDemand.showApproval = false;
            }
            // else if (v.POLDemand.Status == DemandStatus[1].id && this.userLevel == SMS_USER_LEVEL[5].id) {
            //   v.POLDemand.showApproval = true;
            //   console.log("SSD admin");
            // }
            // else if (v.POLDemand.Status == DemandStatus[2].id && this.userLevel == SMS_USER_LEVEL[6].id) {
            //   v.POLDemand.showApproval = true;
            //   console.log("OC SSD");
            // }




          })
        }

      }
    });
  }


  savePOLDemand() {
    this.objVMPOLDemand.POLDemand = this.objPOLDemand;
    this.objVMPOLDemand.lstPOLDemandDetail = this.lstPOLDemandDetail.filter(p => p.itemCheck);
    console.log(this.objVMPOLDemand.lstPOLDemandDetail);
    if (this.objVMPOLDemand.lstPOLDemandDetail.length > 0) {
      this.POLDemandService.saveUnitDemand(this.objVMPOLDemand).subscribe((response) => {
        if (response.StatusCode == ResponseStatus.success) {
          this.messageHelper.showMessage(ResponseStatus.success, "Successfully Saved");
          this.objPOLDemand = new POLDemand();
          this.objPOLDemandDetail = new POLDemandDetail();
          this.lstPOLDemandDetail = [];
          this.objVMPOLDemand = new VMPOLDemand();
          this.totalDemand = 0;
        } else {
          this.messageHelper.showMessage(ResponseStatus.fail, "Failed to save");
        }
      });
    }
    else {
      this.messageHelper.showMessage(ResponseStatus.fail, "Please select item for demand");
    }
  }


  approvePOLDemand() {
    if (confirm("Do you want to approve this demand?")) {
      this.objVMPOLDemand.POLDemand = this.objPOLDemand;
      this.lstPOLDemandDetail.forEach(detail => {
        var infoDetail = this.lstVMPOLDistributionInfo.filter(info => info.ItemID == detail.ItemID)[0];
        if (infoDetail) {
          detail.ApprovedQty = infoDetail.Quantity;
        }
      })


      this.objVMPOLDemand.lstPOLDemandDetail = this.lstPOLDemandDetail;
      this.POLDemandService.approvePOLDemand(this.objVMPOLDemand).subscribe((response) => {
        if (response.StatusCode == ResponseStatus.success) {
          this.messageHelper.showMessage(ResponseStatus.success, "Approved Successfully");
          $('#adminApprovalModal').modal("hide");
          this.getFilteredPOLDemand();
        } else {
          this.messageHelper.showMessage(ResponseStatus.fail, "Failed to approve");
        }
      });
    }
  }


  printDemand(vmDemand) {
    // this.lstPOLDemandDetail = vmDemand;
    this.lstPOLDemandDetail = vmDemand.lstPOLDemandDetail;
    this.objPOLDemand = vmDemand.POLDemand;



    this.lstPOLDemandDetail.forEach(c => {
      var item = this.lstItem.filter(i => i.ItemID == c.ItemID)[0];
      if (item != null) {
        c.ItemName = item.ItemName;
      }
    })
    $('#printPolDemand').modal("show");
  }

  approveDemand(vmDemand) {
    console.log("vmDemand", vmDemand);

    if (this.userLevel < SMS_USER_LEVEL[5].id) {
      if (confirm("Do you want to approve this demand?")) {
        this.POLDemandService.approvePOLDemand(vmDemand).subscribe((response) => {

          if (response.StatusCode == ResponseStatus.success) {
            this.messageHelper.showMessage(ResponseStatus.success, "Approved Successfully");
            this.getFilteredPOLDemand();
          } else {
            this.messageHelper.showMessage(ResponseStatus.fail, "Failed to approve");
          }
        });
      }
    }
    else {

      this.objPOLDemand = vmDemand.POLDemand;
      this.lstPOLDemandDetail = vmDemand.lstPOLDemandDetail;



      this.POLDemandService.getDistributionInfoByUnitID(vmDemand.POLDemand.FromUnitID).subscribe((response) => {
        if (response.StatusCode == ResponseStatus.success) {
          this.lstVMPOLDistributionInfo = response.ResponseObj;
          this.lstVMPOLDistributionInfo.forEach(detail => {
            var demandDetail = this.lstPOLDemandDetail.filter(i => i.ItemID == detail.ItemID)[0];
            if (demandDetail) {
              detail.DemandQuantity = demandDetail.Quantity;
            }
          })
          this.lstVMPOLDistributionInfo = this.lstVMPOLDistributionInfo.filter(d => d.DemandQuantity > 0);
          $('#adminApprovalModal').modal("show");
        }

      });




    }
  }


}
