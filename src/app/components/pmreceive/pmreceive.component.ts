import { Component, OnInit } from '@angular/core';
import { VMUnit } from '../../models/smModels/vmUnit';
import { CondimentDemand } from '../../models/smModels/condimentDemand';
import { UnitService } from '../../services/unitService';
import { ResponseStatus } from '../../common/QSEnums';
import { PMReceive } from '../../models/smModels/PMReceive';
import { PMReceiveDetail } from '../../models/smModels/PMReceiveDetail';
import { VMPMReceive } from '../../models/smModels/vmPMReceive';
import { PMReceiveService } from '../../services/pmReceiveService';
import { VMPMReceivable } from '../../models/smModels/vmPMReceivable';
import { PackingMaterialService } from '../../services/packingMaterialService';
import { PackingMaterial } from '../../models/smModels/packingMaterial';
import { QueryObject } from '../../models/queryObject';
import { MessageHelper } from '../../common/helper/messageHelper';
declare var $: any;

@Component({
  selector: 'app-pmreceive',
  templateUrl: './pmreceive.component.html',
  styleUrls: ['./pmreceive.component.css'],
  providers: [UnitService, PMReceiveService, PackingMaterialService]
})
export class PMReceiveComponent implements OnInit {

  showEntry: boolean = false;

  public lstVMUnit: VMUnit[] = new Array<VMUnit>();
  objCondimentDemand: CondimentDemand = new CondimentDemand();
  public objPMReceive: PMReceive = new PMReceive();
  public lstPMReceiveDetail: PMReceiveDetail[] = new Array<PMReceiveDetail>();
  public objPMReceiveDetail = new PMReceiveDetail();
  public objQueryObject: QueryObject = new QueryObject();

  public objVMPMReceive: VMPMReceive = new VMPMReceive();
  public lstVMPMReceive: VMPMReceive[] = new Array<VMPMReceive>();

  public lstVMPMReceivable: VMPMReceivable[] = new Array<VMPMReceivable>();
  public lstPackingMaterial: PackingMaterial[] = new Array<PackingMaterial>();
  constructor(private messageHelper: MessageHelper, private unitService: UnitService, private pmReceiveService: PMReceiveService,
    private packingMaterialService: PackingMaterialService) { }

  ngOnInit() {
    this.objQueryObject.FromDate = new Date();
    this.objQueryObject.ToDate = new Date();
    this.getAllUnit();
    this.getAllPackingMaterial();
  }

  printPmRecive() {
    $('#printPdDetails').show();
    $(document).on('click', '#printMePMRecive', function () {
      $("#printPdDetails").print({
        globalStyles: true,
        mediaPrint: false,
        stylesheet: null,
        noPrintSelector: ".noprint",
        iframe: true,
        append: null,
        prepend: null,
        manuallyCopyFormValues: true,
        deferred: $.Deferred(),
        timeout: 750,
        title: null,
        doctype: '<!doctype html>'
      });
      $('#printPdDetails').hide();
      // this.generateBarcode(this.objDryItemDemand.AutogeneratedNumber);
    });
  }

  getAllUnit() {
    this.unitService.getAllUnit().subscribe((response) => {
      if (response.StatusCode == ResponseStatus.success) {
        this.lstVMUnit = response.ResponseObj;
      }
    });
  }

  getAllPMReceivable() {
    this.pmReceiveService.getAllPMReceivable(this.objPMReceive.UnitID).subscribe((response) => {
      if (response.StatusCode == ResponseStatus.success) {
        this.lstVMPMReceivable = response.ResponseObj;
        this.lstVMPMReceivable.forEach(detail => {
          detail.Balance = detail.Distribution - detail.Receieved;
        })
      }
    });
  }

  getAllPackingMaterial() {
    this.packingMaterialService.getAllPackingMaterial().subscribe((response) => {
      if (response.StatusCode == ResponseStatus.success) {
        this.lstPackingMaterial = response.ResponseObj;
      }
    });
  }

  addNew() {
    this.showEntry = true;
  }

  close() {
    this.showEntry = false;
  }

  searchPMReceive() {

    this.pmReceiveService.getFilteredPMReceive(this.objQueryObject).subscribe((response) => {
      if (response.StatusCode == ResponseStatus.success) {
        this.lstVMPMReceive = response.ResponseObj;
        this.lstVMPMReceive.forEach(demad => {
          var unit = this.lstVMUnit.filter(u => u.Unit.UnitID == demad.PMReceive.UnitID)[0];
          if (unit) {
            demad.PMReceive.unitName = unit.Unit.UnitName;
          }

        });
      }
    });
  }



  pmViewModal(receiveID) {
    console.log(this.lstVMPMReceive);

    this.objVMPMReceive = this.lstVMPMReceive.filter(u => u.PMReceive.PMReceiveID == receiveID)[0];
    this.lstPMReceiveDetail = this.objVMPMReceive.lstPMReceiveDetail;
    this.lstPMReceiveDetail.forEach(demad => {
      var pakingM = this.lstPackingMaterial.filter(u => u.PackingMaterialID == demad.PackingMeterialID)[0];
      if (pakingM) {
        demad.PackingMaterialName = pakingM.MaterialName;
      }

    });
    $('#pmReciveModal').modal("show");
  }

  editPmRecive(vmRecive) {
    this.lstPMReceiveDetail = vmRecive.lstPMReceiveDetail;
    this.objPMReceive = vmRecive.PMReceive;
    this.pmReceiveService.getAllPMReceivable(this.objQueryObject.UnitID).subscribe((response) => {
      if (response.StatusCode == ResponseStatus.success) {
        this.lstVMPMReceivable = response.ResponseObj;

        console.log(this.lstVMPMReceivable);
        this.lstVMPMReceivable.forEach(detail => {
          detail.Balance = detail.Distribution - detail.Receieved;
          var receiveDetail = this.lstPMReceiveDetail.filter(f => f.PackingMeterialID == detail.PackingMeterialID)[0];
          if (receiveDetail) {
            detail.itemCheck = true;
            detail.Quantity = receiveDetail.NumberOfMaterial;
          }
        })
      }
    });

    this.showEntry = true;
  }


  savePmRecive() {
    this.objVMPMReceive.PMReceive = this.objPMReceive;
    this.lstVMPMReceivable.forEach(detail => {
      if (detail.itemCheck) {
        this.objPMReceiveDetail = new PMReceiveDetail();
        this.objPMReceiveDetail.PackingMeterialID = detail.PackingMeterialID;
        this.objPMReceiveDetail.NumberOfMaterial = detail.Quantity;
        this.objVMPMReceive.lstPMReceiveDetail.push(this.objPMReceiveDetail)
      }
    })

    this.pmReceiveService.savePMReceive(this.objVMPMReceive).subscribe((response) => {
      if (response.StatusCode == ResponseStatus.success) {
        this.messageHelper.showMessage(ResponseStatus.success, "Successfully Saved");
        this.lstVMPMReceivable = [];
        this.objPMReceive = new PMReceive();
        this.lstPMReceiveDetail = [];
        this.objVMPMReceive = new VMPMReceive();
      }
    });
  }



  loadItem() {

  }

}
